@using CoolVocabulary.Models;
@{
    Layout = "";
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enlarge your English, Spanish, French, Italian, Portuguese, German, Russian vocabulary - CoolVocabulary.com</title>
    @Styles.Render("~/Content/css")
    <link rel="stylesheet" href="~/Scripts/app-vocabulary/app/vocabulary.min.css" />
    <link rel="chrome-webstore-item"
          href="https://chrome.google.com/webstore/detail/cifbpdjhjkopeekabdgfjgmcbcgloioi">
</head>
<body>
    @{
        ApplicationUser user = ViewBag.user;
        var userDto = new {
            id = user.Id,
            displayName = user.DisplayName,
            nativeLanguage = ((LanguageType)user.NativeLanguage).ToString()
        };
    }
    @Html.AntiForgeryToken()
    <script>
    </script>
    @Scripts.Render("~/bundles/js-basic")
    <script>
        var ServerData = {};
        // CSRF Token
        ServerData.CSRFFormToken = $("input[name='__RequestVerificationToken']").val();
        // Send CSRF token in X-XSRF-Token header in each ajax request
        //$.ajaxSetup({
        //    headers: {
        //        "X-Requested-With": "XMLHttpRequest",
        //        "X-XSRF-Token": ServerData.CSRFFormToken
        //    }
        //});
        // Inject some server side data
        ServerData.User = @(Html.Raw(Json.Encode(userDto)));
        ServerData.Languages = @(Html.Raw(Json.Encode(ViewBag.SupportedLanguages)));
    </script>
    @Scripts.Render("~/bundles/js-vocabulary")
</body>
</html>